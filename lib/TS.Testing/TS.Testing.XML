<?xml version="1.0"?>
<doc>
    <assembly>
        <name>TS.Testing</name>
    </assembly>
    <members>
        <member name="T:TS.Testing.ContainsState">
            <summary>
            Contains helper members for working with the <see cref="M:TS.Testing.ContainsStateExtensions.ContainsState(System.Object,System.Object)"/> method.
            </summary>
        </member>
        <member name="M:TS.Testing.ContainsState.With(System.Object)">
            <summary>
            Generates an NUnit <see cref="T:NUnit.Framework.Constraints.Constraint"/> that invokes the 
            <see cref="M:TS.Testing.ContainsStateExtensions.ContainsState(System.Object,System.Object)"/> extension method inline 
            with an NUnit assertion.
            </summary>
            <param name="expected">
            The state that is expected to be contained within actual object.
            </param>
        </member>
        <member name="P:TS.Testing.ContainsState.Null">
            <summary>
            Specifies that an expected object is null.
            </summary>
        </member>
        <member name="P:TS.Testing.ContainsState.EmptyCollection">
            <summary>
            Specifies that an expected object is an empty collection.
            </summary>
        </member>
        <member name="T:TS.Testing.ContainsStateExtensions">
            <summary>
            Extension methods used by the <see cref="T:TS.Testing.ContainsStateConstraint"/>.
            </summary>
        </member>
        <member name="M:TS.Testing.ContainsStateExtensions.ContainsState(System.Object,System.Object)">
            <summary>
            Determines if the actual object contains the state of the expected object.
            </summary>
            <param name="actual">
            The object whose state is being examined.
            </param>
            <param name="expected">
            The state to confirm within the <paramref name="actual"/> object.  
            This parameter can be any object; however, a useful application is to use an 
            anonymous type.
            </param>
            <remarks>
            This method is useful for state-based unit tests where you need to assert 
            the state of objects with complext structures.
            </remarks>
        </member>
        <member name="T:TS.Testing.ContainsStateConstraint">
            <summary>
            An NUnit <see cref="T:NUnit.Framework.Constraints.Constraint"/> that will execute the 
            <see cref="M:TS.Testing.ContainsStateExtensions.ContainsState(System.Object,System.Object)"/> method.
            </summary>
        </member>
        <member name="M:TS.Testing.ContainsStateConstraint.#ctor(System.Object)">
            <summary>
            Intializes a new instance of the <see cref="T:TS.Testing.ContainsStateConstraint"/> class 
            with the specified expected object.
            </summary>
        </member>
        <member name="M:TS.Testing.ContainsStateConstraint.Matches(System.Object)">
            <summary>
            Overrides the <see cref="M:NUnit.Framework.Constraints.Constraint.Matches(System.Object)"/> method 
            in order to perform the state comparison.
            </summary>
        </member>
        <member name="M:TS.Testing.ContainsStateConstraint.WriteMessageTo(NUnit.Framework.Constraints.MessageWriter)">
            <summary>
            Overrides the <see cref="M:NUnit.Framework.Constraints.Constraint.WriteMessageTo(NUnit.Framework.Constraints.MessageWriter)"/> method 
            in order to write the failure message.
            </summary>
        </member>
        <member name="M:TS.Testing.ContainsStateConstraint.WriteDescriptionTo(NUnit.Framework.Constraints.MessageWriter)">
            <summary>
            Overrides the <see cref="M:NUnit.Framework.Constraints.Constraint.WriteDescriptionTo(NUnit.Framework.Constraints.MessageWriter)"/> method 
            in order to write the failure description.
            </summary>
        </member>
        <member name="T:TS.Testing.ContainsStateResult">
            <summary>
            The result of a call to <see cref="M:TS.Testing.ContainsStateExtensions.ContainsState(System.Object,System.Object)"/>.
            </summary>
        </member>
        <member name="M:TS.Testing.ContainsStateResult.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TS.Testing.ContainsStateResult"/> class 
            that represents a successful state comparison (<see cref="P:TS.Testing.ContainsStateResult.Success"/> is true).
            </summary>
        </member>
        <member name="M:TS.Testing.ContainsStateResult.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:TS.Testing.ContainsStateResult"/> class 
            that represents a failed state comparison (<see cref="P:TS.Testing.ContainsStateResult.Success"/> is false) 
            with the associated location and message.
            </summary>
        </member>
        <member name="M:TS.Testing.ContainsStateResult.#ctor(System.String,System.String,System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:TS.Testing.ContainsStateResult"/> class 
            that represents a failed state comparison (<see cref="P:TS.Testing.ContainsStateResult.Success"/> is false) 
            with the associated location and format message and values.
            </summary>
        </member>
        <member name="P:TS.Testing.ContainsStateResult.Success">
            <summary>
            Gets whether or not the state of the expected object was contained within the actual object.
            </summary>
        </member>
        <member name="P:TS.Testing.ContainsStateResult.FailReason">
            <summary>
            If <see cref="P:TS.Testing.ContainsStateResult.Success"/> is false, contains the reason why the states don't match.
            </summary>
        </member>
        <member name="P:TS.Testing.ContainsStateResult.Actual">
            <summary>
            If <see cref="P:TS.Testing.ContainsStateResult.Success"/> is false, gets or sets the actual value.
            </summary>
        </member>
        <member name="P:TS.Testing.ContainsStateResult.Expected">
            <summary>
            If <see cref="P:TS.Testing.ContainsStateResult.Success"/> is false, gets or sets the expected value.
            </summary>
        </member>
    </members>
</doc>

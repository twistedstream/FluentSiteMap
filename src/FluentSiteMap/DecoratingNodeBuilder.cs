using System;
using System.Collections.Generic;

namespace FluentSiteMap
{
    /// <summary>
    /// Base class for all <see cref="INodeBuilder"/> classes 
    /// that decorate themselves on top of an existing <see cref="INodeBuilder"/> 
    /// instance.
    /// </summary>
    public abstract class DecoratingNodeBuilder
        : INodeBuilder
    {
        private readonly INodeBuilder _inner;

        /// <summary>
        /// Initializes a new instance of the <see cref="DecoratingNodeBuilder"/> class.
        /// </summary>
        /// <param name="inner">
        /// The inner <see cref="INodeBuilder"/> instance being decorated.
        /// </param>
        protected DecoratingNodeBuilder(INodeBuilder inner)
        {
            if (inner == null) throw new ArgumentNullException("inner");

            _inner = inner;
        }

        /// <summary>
        /// Implements the <see cref="INodeBuilder.Filters"/> method
        /// by returning the filters of the inner 
        /// <see cref="INodeBuilder"/> instance.
        /// </summary>
        public IList<INodeFilter> Filters
        {
            get { return _inner.Filters; }
        }

        /// <summary>
        /// Implements the <see cref="INodeBuilder.Build"/> method
        /// by invoking the <see cref="INodeBuilder.Build"/> method 
        /// of the inner <see cref="INodeBuilder"/> instance, 
        /// allowing the subclass to modify the resulting 
        /// <see cref="Node"/> object before returning it.
        /// </summary>
        public Node Build(BuilderContext context)
        {
            if (context == null) throw new ArgumentNullException("context");

            var node = _inner.Build(context);

            OnBuild(node, context);

            return node;
        }

        /// <summary>
        /// Template method that subclasses can use to modify the 
        /// <see cref="Node"/> object generated by the inner 
        /// <see cref="INodeBuilder"/> instance.
        /// </summary>
        protected abstract void OnBuild(Node node, BuilderContext context);
    }
}